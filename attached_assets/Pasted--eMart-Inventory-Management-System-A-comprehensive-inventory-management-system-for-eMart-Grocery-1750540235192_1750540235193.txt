# eMart Inventory Management System

A comprehensive inventory management system for eMart Grocery Shop with advanced features including PDF generation, barcode generation, alerts, and maker-checker workflow.

## 🚀 Features

### Core Features
- **User Authentication & Authorization** - Role-based access control (Admin, Maker, Checker)
- **Product Management** - Complete CRUD operations with categories
- **Inventory Tracking** - Separate warehouse and shelf inventory management
- **Supplier Management** - Supplier information and relationship tracking
- **Invoice Management** - Supplier invoice generation and tracking
- **Barcode Generation** - Multiple barcode formats (Code128, EAN13, QR Code)
- **PDF Generation** - Invoice, catalog, and report generation
- **Alert System** - Low stock, expiry, and overdue invoice alerts
- **Email Notifications** - Automated email alerts and notifications
- **File Upload** - CSV import for bulk data processing
- **Maker-Checker Workflow** - Approval workflow for inventory changes
- **Audit Logging** - Complete audit trail of all operations

### Advanced Features
- **Indian Rupee Support** - Complete INR currency integration
- **Real-time Alerts** - Scheduled alert checking and notifications
- **Inventory Analytics** - Stock levels, value calculations, and reports
- **Multi-location Support** - Warehouse and shelf inventory separation
- **Expiry Management** - Product expiry tracking and warnings
- **Damaged Goods Tracking** - Separate tracking for damaged inventory
- **Reserved Stock Management** - Stock reservation for orders
- **Threshold Management** - Configurable stock thresholds
- **Bulk Operations** - Batch processing for multiple products
- **Search & Filter** - Advanced search and filtering capabilities

## 🛠️ Tech Stack

### Backend
- **Spring Boot 3.2** - Main framework
- **Java 24** - Programming language
- **MySQL 8.0** - Database
- **Spring Data JPA** - Data access layer
- **Spring Security** - Authentication and authorization
- **JWT** - Token-based authentication
- **iText 7** - PDF generation
- **ZXing** - Barcode generation
- **Apache Kafka** - Message queuing (for future use)
- **Swagger/OpenAPI** - API documentation

### Frontend (Planned)
- **React 18** - Frontend framework
- **TypeScript** - Type safety
- **Tailwind CSS** - Styling
- **Redux Toolkit** - State management
- **React Router** - Navigation

### DevOps
- **Docker** - Containerization
- **Kubernetes** - Orchestration (for future use)
- **Maven** - Build tool

## 📁 Project Structure

```
backend/
├── src/main/java/com/emart/inventory/
│   ├── InventoryManagementApplication.java
│   ├── controller/
│   │   ├── ProductController.java
│   │   ├── InventoryController.java
│   │   ├── SupplierController.java
│   │   ├── InvoiceController.java
│   │   ├── AlertController.java
│   │   └── TestController.java
│   ├── service/
│   │   ├── ProductService.java
│   │   ├── InventoryService.java
│   │   ├── SupplierService.java
│   │   ├── InvoiceService.java
│   │   ├── AlertService.java
│   │   ├── PdfService.java
│   │   ├── BarcodeService.java
│   │   └── EmailService.java
│   ├── repository/
│   │   ├── ProductRepository.java
│   │   ├── InventoryRepository.java
│   │   ├── SupplierRepository.java
│   │   ├── InvoiceRepository.java
│   │   ├── AlertRepository.java
│   │   └── UserRepository.java
│   ├── model/
│   │   ├── Product.java
│   │   ├── Inventory.java
│   │   ├── Supplier.java
│   │   ├── Invoice.java
│   │   ├── Alert.java
│   │   └── User.java
│   └── config/
│       ├── SecurityConfig.java
│       └── JpaConfig.java
├── src/main/resources/
│   ├── application-dev.yml
│   └── db/migration/
└── pom.xml
```

## 🚀 Quick Start

### Prerequisites
- Java 24 or higher
- MySQL 8.0
- Maven 3.6+
- IntelliJ IDEA (recommended)

### Database Setup
1. Install MySQL 8.0
2. Create database:
```sql
CREATE DATABASE emart_inventory;
```

### Application Setup
1. Clone the repository
2. Update database configuration in `application-dev.yml`:
```yaml
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/emart_inventory
    username: root
    password: 12345678  # Your MySQL password
```

3. Run the application:
```bash
cd backend
mvn spring-boot:run
```

4. Access the application:
- API Base URL: `http://localhost:8080/api/v1`
- Swagger UI: `http://localhost:8080/api/v1/swagger-ui.html`
- Health Check: `http://localhost:8080/api/v1/test/health`

## 📊 API Endpoints

### Products
- `GET /products` - Get all products (paginated)
- `GET /products/{id}` - Get product by ID
- `POST /products` - Create new product
- `PUT /products/{id}` - Update product
- `DELETE /products/{id}` - Delete product
- `GET /products/{id}/barcode` - Generate product barcode
- `GET /products/{id}/qrcode` - Generate product QR code
- `GET /products/export/pdf` - Export products to PDF

### Inventory
- `GET /inventory` - Get all inventory
- `GET /inventory/{id}` - Get inventory by ID
- `POST /inventory` - Create inventory entry
- `PUT /inventory/{id}` - Update inventory
- `POST /inventory/{id}/transfer` - Transfer stock between locations
- `POST /inventory/{id}/adjust` - Adjust inventory levels

### Suppliers
- `GET /suppliers` - Get all suppliers
- `GET /suppliers/{id}` - Get supplier by ID
- `POST /suppliers` - Create new supplier
- `PUT /suppliers/{id}` - Update supplier
- `DELETE /suppliers/{id}` - Delete supplier

### Invoices
- `GET /invoices` - Get all invoices
- `GET /invoices/{id}` - Get invoice by ID
- `POST /invoices` - Create new invoice
- `PUT /invoices/{id}` - Update invoice
- `GET /invoices/{id}/pdf` - Generate invoice PDF

### Alerts
- `GET /alerts` - Get all alerts
- `GET /alerts/active` - Get active alerts
- `GET /alerts/unread` - Get unread alerts
- `PATCH /alerts/{id}/read` - Mark alert as read
- `PATCH /alerts/{id}/resolve` - Mark alert as resolved

## 💰 Indian Rupee Integration

The system is fully configured for Indian Rupee (INR) with:
- All prices in INR (₹)
- GST calculations (18%)
- Indian address formats
- Localized date formats
- Indian product categories

## 📈 Sample Data

The project includes comprehensive sample data:
- 50+ products across 10 categories
- Realistic Indian pricing (₹25 - ₹350)
- Various expiry dates
- Multiple suppliers
- Sample inventory levels

## 🔧 Configuration

### Application Properties
Key configuration options in `application-dev.yml`:

```yaml
# Database
spring.datasource.password: 12345678

# Barcode Settings
app.barcode:
  width: 300
  height: 100
  format: PNG

# Alert Settings
app.alert:
  low-stock-threshold: 10
  expiry-warning-days: 3
  email.enabled: true

# Invoice Settings
app.invoice:
  currency: INR
  currency-symbol: ₹
```

## 📧 Email Notifications

The system supports email notifications for:
- Low stock alerts
- Expiry warnings
- Overdue invoices
- Damaged goods detection
- Delivery delays
- System maintenance

## 🏷️ Barcode Generation

Supported barcode formats:
- **Code128** - General purpose
- **EAN13** - Retail products
- **QR Code** - Product information

Features:
- Custom styling
- Multiple sizes
- Product information encoding
- Batch generation

## 📄 PDF Generation

PDF generation capabilities:
- **Invoices** - Complete supplier invoices with GST
- **Product Catalog** - Product listing with prices
- **Inventory Reports** - Stock levels and values
- **Custom Reports** - Configurable report templates

## 🔔 Alert System

Automated alerts for:
- **Low Stock** - Below threshold levels
- **Expiry Warning** - Products expiring soon
- **Overdue Invoices** - Payment delays
- **Damaged Goods** - Quality issues
- **Threshold Breach** - Stock level violations
- **Delivery Delays** - Supply chain issues

## 🔐 Security

- **JWT Authentication** - Secure token-based auth
- **Role-based Access** - Admin, Maker, Checker roles
- **Password Encryption** - BCrypt hashing
- **CORS Configuration** - Cross-origin support
- **Input Validation** - Comprehensive validation

## 📊 Monitoring & Logging

- **Health Checks** - Application status monitoring
- **Audit Logging** - Complete operation tracking
- **Performance Metrics** - Response time monitoring
- **Error Tracking** - Exception handling and logging

## 🚀 Deployment

### Docker Deployment
```bash
# Build image
docker build -t emart-inventory .

# Run container
docker run -p 8080:8080 emart-inventory
```

### Production Configuration
1. Update `application-prod.yml`
2. Configure production database
3. Set up email service
4. Configure SSL certificates
5. Set up monitoring

## 🤝 Contributing

1. Fork the repository
2. Create feature branch
3. Make changes
4. Add tests
5. Submit pull request

## 📝 License

This project is licensed under the MIT License.

## 📞 Support

For support and questions:
- Email: support@emart.com
- Documentation: [API Docs](http://localhost:8080/api/v1/swagger-ui.html)
- Issues: GitHub Issues

## 🎯 Roadmap

### Phase 1 (Current)
- ✅ Core inventory management
- ✅ PDF generation
- ✅ Barcode generation
- ✅ Alert system
- ✅ Basic API

### Phase 2 (Next)
- 🔄 React frontend
- 🔄 Advanced analytics
- 🔄 Mobile app
- 🔄 Integration APIs

### Phase 3 (Future)
- 📋 AI-powered predictions
- 📋 IoT integration
- 📋 Advanced reporting
- 📋 Multi-tenant support

---

**eMart Inventory Management System** - Comprehensive inventory management for modern grocery stores. 